
```{r}
#| include: false
library(dsld)
library(qeML)
```

{{< pagebreak >}}

 
# Shrinkage Estimators

::: {.callout-note}

## Goals of this chapter:

In the previous chapter, we introduced the norm of a vector. In many
data science applications, solutions with smaller norms may be more
accurate. This point is explored here.

:::

## Ridge Regression

In seminal paper, Hoerl and Kennard[*Technometrids*,
Februaru1970]{.column-margin} discussed the problem of
*multicollinearity* of predictor variables in a linear model.  

### Multicollinearity{#sec-nearly}

The term *multicollinearity* refers to settings in which the following concerns
arise:

* One column of the matrix $A$ in @eq-linregformula is nearly equal to
  some linear combination of the others.

* Thus $A$ is nearly not of full rank.

* Thus $A'A$ is nearly not of full rank.

* Thus $\widehat{\beta}$ is unstable, in the form of high variance.

(Technically, the above conditions refer to *approximate*
multicollinearity, with the exact version consisting of the first three
bullet points, minus the word "nearly." However, informally, the term
*multicollinearity* is usually taken to mean the approximate condition.)

That latter point is often quantified by the *Variance Inflation
Factor*. To motivate it, consider the usual "R-squared" value
from linear regression analyis, which is the squared correlation between
"Y" and predicted "Y". Let $R^2_j$ denote that measure in the case of
predicting column $j$ of $A$ from the other columns. The quantity

$$
VIF_j = \frac{1}{1-R^2_j}
$$

then measures the negative impact due to multicollinearity on estimating 
$\widehat{\beta}_j$.

Needless to say, the word "nearly" above, e.g. in "nearly not of full
rank," is vague, and leaves open the question of "How near is 'near'?"
and "What can we do about it?" Ridge regression is Hoerl's and
Kennards's answer to the latter question, and it is based on a parameter
that can be used to explore the former one.

### The ridge solution

Their solution is simple; Add some quantity to the diagonal of $A'A$.
Specifically, @eq-linregformula now becomes

$$
\widehat{\beta} - (A'A + \lambda I)^{-1} A'S
$${#eq-ridge}

where $\lambda$ is a positive number chosen by the analyst.

Here $A$ has dimensions $n \textrm{ x } p$, and $I$ is the $p \textrm{ x } p$
identity matrix.

### Matrix formulation{#sec-matform}

Using partitioned matrices helps understand ridge. Replace  $A$ and $S$
by

$$
A_{new} =
 \left (
 \begin{array}{r}
 A \\
 \lambda I \\
 \end{array}
 \right )
$$

and

$$
S_{new} =
 \left (
 \begin{array}{r}
 S \\
 0 \\
 \end{array}
 \right )
$$

where 0 means $p$ 0s. In essence, we are adding artificial data here,
consisting of $p$ new rows to $A$, and $p$ new elements to $S$.
So @eq-ridge is just the result of applying @eq-linregformula to
$A_{new}$ and $S_{new}$.

Loosely speaking, we can think of the addition of $\lambda I$ to $A'A$
makes the latter "larger", and thus its inverse smaller. In other words,
we are "shrinking" $\widehat{\beta}$ towards 0. This effect is made even
stronger by the fact that we added 0s data to $S$. This will be made
more precise below.

### Modern view{#sec-pgtn}

There are many ways to deal with multicollinearity, which we must remind
the reader only concerns *approximate* linear dependence pf the columns of
$A$. These days, ridge is often used for situations in which there is
*exact* linear dependence.

We saw such a setting in @sec-censusrref. There we deliberately induced
exact linear dependence by inclusion of both male and female dummy
variables. Let's apply ridge:

```{r}
library(qeML) 
data(svcensus) 
svc <- svcensus[,c(1,4:6)]  
svc$man <- as.numeric(svc$gender == 'male') 
svc$woman <- as.numeric(svc$gender == 'female') 
svc$gender <- NULL 
a <- svc[,-2] 
lambda <- 0.1 
a <- as.matrix(a) 
tmp1 <- solve(t(a) %*% a + lambda * diag(4)) 
tmp1 %*% t(a) %*% as.matrix(svc$wageinc) 
```

The results essentially are the same as what we obtained by having only
one dummy, thus no linear dependence: Men still enjoy about an \$11,000
advantage. But ridge allowed us to avoid deleting one of our dummies.
Such deletion is easy in this case, but for large $p$, say in the
hundreds or even more, some analysts prefer the convenience of ridge.

Of course, there is still the issue of how to choose the value of
$\lambda$. This is beyond the scope of this book, which focuses on linar
algebra.

### Formalizing the notion of shrinkage

In the early 1980s, the statistical world was shocked by research by
James and Stein that found, in short that:

<blockquote>

Say $W$ has $q$-dimensional normal distribution with mean vector $\mu$
and independent components having variance $\sigma^2$, each. We have a
random sample of size $n$, i.e. $n$ independent observations on $W$.
Then if $q \geq 3$, in terms of Mean Squared Estimation Error, the best
estimator of $\mu$ is NOT the sample mean $\bar{W}$. Instead, it's

$$
\left (
1 - \frac{(q-2) \sigma^2/n}{||\bar{W}||^2} 
\right )
\bar{W}
$$

</blockquote>

The quantity within the parentheses is typically smaller than 1, giving
us the shrinkage property. Note, though, that with larger $n$, the
amount of shrinkage is minor.

In the case of linear regression, shrinkage works there too, with $q$
being the number of columns in the $A$ matrix. 

### Shrinkage through length penalization

Say instead of minimizing @eq-matrixss, we minimize

$$
(S - Ab)'(S - Ab) + \lambda ||b||^2 
$${#eq-matrixssridge}

The larger $b$ is, the harder it is to minimize the overall quantity
@eq-matrixssridge. We say that we *penalize* large values of $b$,
an indirect way of pursuing shrinkage. Now take the derivative and set
to 0:

$$
0 = A'(S-Ab) + \lambda b
$$

i.e.

$$
(A'A + \lambda I) b = A'S
$$ 

and thus

$$
\widehat{\beta} = (A'A+\lambda I)^{-1} A'S
$$

It's ridge! So here is formalization of our "almost singular" etc.
language above to justify ridge as a shrinkage estimator..

### Shrinkage through length limitation

Instead of penalizing $||b||$, we could simply constrain it, i.e. we
could set our optimization problem to:

<blockquote>

minimize $(S-Ab)'(S-Ab)$, subject to the constraint $||b||^2 \leq \gamma$

</blockquote>

We say that this new formulation is the *dual* of the first one. One can
show that they are typically equivalent.

## The LASSO

The LASSO (Least Absolute Shrinkage and Selection Operator) was
developed by Robert Tibshirani in 1996, following earlier work by Leo
Breiman.  It takes $\widehat{\beta}$ to be the value of $b$ that
minimizes

$$
(S - Ab)'(S - Ab) + \lambda ||b||_1
$${#eq-matrixsslasso}

where the "l1 norm" is 

$$
||b|| = \sum_{i=1}^p |b_i|
$$

We will write our original norm as $||b||_2$.

This is a seemingly minor change, but with important implications.  What
Breiman and Tibshirani were trying to do was to obtain a *sparse*
$\widehat{\beta}$ , i.e. a solution with lots of 0s, thereby providing a
method for predictor variable selection. This is important because
so-called "parsimonious" prediction models are desirable.

### Properties

To that end, first note that it can be shown that, under some technical
conditions, that the ridge solution minimizes 

$$
(S - Ab)'(S - Ab) 
$$

subject to the constraint

$$
||b||_2 \leq \gamma
$$

while in the LASSO case the constraint is

$$
||b||_1 \leq \gamma
$$

As with $\lambda$ in the original formulation, $\gamma$ is a positive
number chosen by the analyst.

### Geometric view

Comparison between the ridge and LASSO concepts is often done via this
graph depicting the LASSO setting:

![LASSO sparsity](LASSO_gray.png)

Here $p = 2$, with $b = (b_1,b_2)'$. The horizontal and vertical axes
represent $b_1$ and $b_2$.  

* The constraint $||b||_1 \leq \gamma$ then takes the form of a diamond,
  with corners at 
  $(\gamma,0)$, 
  $(0,\gamma)$, 
  $(-\gamma,0)$ and
  $(0,-\gamma)$. The constraint $||b||_1 \leq \gamma$
  requires us to choose a point $b$ somewhere in the
  diamond, including the boundary.

* The concentric ellipses depict the values of $c(b) = (S - Ab)'(S -
  Ab)$, as follows.  

* Consider one particular value of $c(b)$, say 1.68. 

* Many different points $b$ in the graph will have $c(b) = 1.68$; in
  fact, the locus of all such points is an ellipse.  

* There is one ellipse for each possible value of $c(b)$. So, there are
  infinitely many ellipses, though only two are shown here.

* Larger values of $c(b)$ yield larger ellipses.

* On the one hand, we want to choose a $b$ for which $c(b)$ -- our total
  squared prediction error -- is small, thus a smaller ellipse. 


* But on the other hand, we need at least one point on the ellipse to 
  be in common with the diamond.  

* The solution is then a point $b$ in which the ellipse
  just barely touches the diamond, respectively.

The key point is that that "barely touching" point 
will be one of the four corners of the diamond, points at which either
$b_1 = 0$ or $b_2 = 0$ -- *hence a sparse solution*.  

This will not happen with ridge. The diamond would now be a circle (not
shown). The "barely touching point" will almost certainly will be at a
place in which both $b_1$ and $b_2$ are nonzero. Hence no sparsity.

### Use of LASSO for dimension reduction 

In prediction applications, one goal is to avoid *overfitting*, meaning
using using such a complex model that it actually has poorer predictive
power than a simpler one. An example is using too many predictors.

The LASSO, in producing a sparse estimated coefficient vector, reduces
the number of predictors. This would seem to achieve our goal, but a
problem is that we must still choose $\lambda$. A common approach is to
use *cross validation* (@sec-crossval) for this purpose.

## A Warning

Many statistical quantities now have *regularized*, i.e. shrunken
versions. It is also standard practice in neural networks. This may be
quite helpful in prediction contexts. However, note the following:

::: {.callout-important}

## No Statistical Inference on Shrinkage Estimators

Shrinkage produces a bias, of unknown size. Thus classical statistical
inference (confidence intervals, hypothesis tests), e.g. those based on
@eq-varcovar for linear models, is not possible.

:::

## Your Turn

❄️  **Your Turn:** Show that $A_{new}$ in @sec-matform is of full rank, $p$.



