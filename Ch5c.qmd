
```{r}
#| include: false
library(dsld)
library(qeML)
```

{{< pagebreak >}}

 
# Shrinkage Estimators 

::: {.callout-note}

## Goals of this chapter:

In the previous chapter, we introduced the norm of a vector. In many
data science applications, solutions with smaller norms may be more
accurate. This point is explored here.

:::
## Multicollinearity{#sec-nearly}

The term *multicollinearity* refers to settings in which the following concerns
arise:

* One column of the matrix $A$ in @eq-linregformula is nearly equal to
  some linear combination of the others.

* Thus $A$ is nearly not of full rank.

* Thus $A'A$ is nearly not of full rank.

* Thus $\widehat{\beta}$ is unstable, in the form of high variance.

(Technically, the above conditions refer to *approximate*
multicollinearity, with the exact version consisting of the first three
bullet points, minus the word "nearly." However, informally, the term
*multicollinearity* is usually taken to mean the approximate condition.)

That latter point is often quantified by the *Variance Inflation
Factor*. To motivate it, consider the "R-squared" value
from linear regression analyis, which is the squared correlation between
"Y" and predicted "Y". Let $R^2_j$ denote that measure in the case of
predicting column $j$ of $A$ from the other columns. The quantity

$$
VIF_j = \frac{1}{1-R^2_j}
$$

then measures the negative impact due to multicollinearity on estimating 
$\widehat{\beta}_j$. The intuition is that, say, column 3 of $A$ can be
predicte well using a linear model, then that column is approximately
equal to a linear combination of the other columns. This is worrisome in
light of the problems described above.

Needless to say, the word "nearly" above, e.g. in "nearly not of full
rank," is vague, and leaves open the question of "What can we do about
it?" We will present several answers to these questions in this and the
succeeding chapters.

## Example: Million Song Dataset{#sec-millionsong}

Let's consider the Million Song Dataset, varous versions of which are on
the Web. 

Ours is a 50,000-line subset of the one with 515345 rows and 91
columns. The first column is the year of release, followed by 90 columns
of various audio measurements. The goal is to predict the year, **V1**,
from the audio variables **V2** through **V91**.

The function **regclass::VIF** will compute the VIF values for us.

``` r
> lmout <- lm(V1 ~ .,data=s50)
> VIF(lmout)
     V2       V3       V4       V5       V6       V7       V8       V9
3.215081 2.596474 4.236853 7.414375 1.534492 5.844729 2.794018 3.192805
     V10      V11      V12      V13      V14      V15      V16      V17
2.072851 3.673590 4.705886 1.708520 2.446279 2.827296 3.672250 7.409782
     V18      V19      V20      V21      V22      V23      V24      V25
2.634033 9.472261 4.217311 7.147952 5.122114 7.984860 9.675134 3.591586
     V26      V27      V28      V29      V30      V31      V32      V33
1.818596 1.758043 3.879968 1.663670 2.108174 2.321385 2.056017 1.854913
     V34      V35      V36      V37      V38      V39      V40      V41
3.011534 2.040587 2.760111 2.879667 1.918229 2.176048 2.074103 1.946859
     V42      V43      V44      V45      V46      V47      V48      V49
1.704259 2.138794 1.690651 1.556782 1.817380 3.000759 1.547592 2.140282
     V50      V51      V52      V53      V54      V55      V56      V57
2.496121 1.612253 2.042571 2.208492 1.723669 2.024290 2.016403 2.033654
     V58      V59      V60      V61      V62      V63      V64      V65
2.004260 2.998469 2.074152 3.410124 2.153116 1.378160 3.270617 1.502543
     V66      V67      V68      V69      V70      V71      V72      V73
2.581171 1.725809 2.167673 2.379354 2.062862 1.703360 2.036596 1.984427
     V74      V75      V76      V77      V78      V79      V80      V81
2.557163 1.465020 1.515436 2.260728 1.840509 2.078497 3.604771 1.595064
     V82      V83      V84      V85      V86      V87      V88      V89
2.528307 2.005876 2.283956 1.448379 1.895053 1.601004 1.581099 2.252362
     V90      V91
1.332590 1.570891
```

As a rough guide, values of VIF about 5.0 are considered concerning by
many analysts. Under that criterion, variables **V5**, **V7**, **V17**
and so on look troublesome.

What can be done? One simple approach would be to delete those columns
from the dataset. This is indeed is a common solution, but another is
*ridge regression*, which we present next.

## Ridge Regression

In seminal paper, Hoerl and Kennard[*Technometrids*,
Februaru1970]{.column-margin} discussed the problem of
*multicollinearity* of predictor variables in a linear model.  


### The ridge solution

Their solution is simple; Add some quantity to the diagonal of $A'A$.
Specifically, @eq-linregformula now becomes

$$
\widehat{\beta} - (A'A + \lambda I)^{-1} A'S
$${#eq-ridge}

where $\lambda$ is a positive number chosen by the analyst.

Here $A$ has dimensions $n \textrm{ x } p$, and $I$ is the $p \textrm{ x } p$
identity matrix.

### Matrix formulation{#sec-matform}

Using partitioned matrices helps understand ridge. Replace  $A$ and $S$
by

$$
A_{new} =
 \left (
 \begin{array}{r}
 A \\
 \lambda I \\
 \end{array}
 \right )
$$

and

$$
S_{new} =
 \left (
 \begin{array}{r}
 S \\
 0 \\
 \end{array}
 \right )
$$

where 0 means $p$ 0s. In essence, we are adding artificial data here,
consisting of $p$ new rows to $A$, and $p$ new elements to $S$.
So @eq-ridge is just the result of applying @eq-linregformula to
$A_{new}$ and $S_{new}$.

Loosely speaking, we can think of the addition of $\lambda I$ to $A'A$
makes the latter "larger", and thus its inverse smaller. In other words,
we are "shrinking" $\widehat{\beta}$ towards 0. This effect is made even
stronger by the fact that we added 0s data to $S$. This will be made
more precise below.

### Example: Million Song dataset

We will use **glmnet**, one of the most widely-used R  package.

``` r
> library(glmnet)
> x <- s50[,-1]
> y <- s50[,1]
> glmOut <- glmnet(x,y,
>              alpha=0,  # ridge
>              lambda=0.1)
> coef(glmOut)
(Intercept)  1.952611e+03
V2           8.573258e-01
V3          -5.589618e-02
V4          -4.521365e-02
V5           8.939743e-04
V6          -9.630525e-03
V7          -2.075296e-01
V8          -4.753624e-03
V9          -9.733144e-02
V10         -6.383153e-02
V11          2.778348e-02
V12         -1.486791e-01
V13         -1.326579e-02
V14          4.756877e-02
V15          3.197157e-04
V16         -4.765018e-04
V17          4.951670e-04
V18          5.276124e-04
V19          1.254372e-03
V20          1.518736e-03
V21          2.206416e-03
V22         -4.304329e-04
V23          5.792964e-04
V24          7.717453e-03
V25          3.205090e-03
V26         -3.527333e-03
V27          4.785205e-05
V28          1.510325e-03
V29          2.996810e-04
V30          6.384049e-04
V31         -2.560997e-04
V32         -4.861561e-04
V33         -6.250266e-04
V34         -3.757523e-03
V35          3.563733e-04
V36          1.288622e-03
V37         -4.417041e-03
V38         -2.502325e-04
V39          9.405005e-04
V40          1.490186e-03
V41         -1.534097e-03
V42         -1.510983e-03
V43         -1.777780e-03
V44         -1.814201e-03
V45         -1.865966e-03
V46         -1.107727e-03
V47          5.906898e-03
V48          6.578124e-04
V49         -2.040170e-03
V50          4.795372e-04
V51          1.162657e-03
V52          6.164815e-04
V53         -9.613775e-04
V54          1.571230e-03
V55         -1.230929e-03
V56         -1.395143e-03
V57          2.158453e-04
V58         -1.975641e-03
V59          2.039760e-03
V60         -1.302405e-03
V61          6.875221e-04
V62         -3.480975e-03
V63         -3.285816e-03
V64         -9.199332e-03
V65          1.283424e-03
V66         -1.444237e-03
V67         -5.957302e-05
V68          1.139299e-03
V69         -9.805816e-04
V70         -3.734949e-03
V71         -5.127353e-03
V72         -1.071399e-03
V73          1.808175e-04
V74         -1.034781e-05
V75          4.315147e-03
V76          3.382526e-03
V77          1.111779e-02
V78          3.162072e-04
V79         -4.565407e-03
V80          3.729735e-05
V81          2.362107e-04
V82         -9.349464e-04
V83         -2.846584e-04
V84          1.439897e-03
V85          1.360484e-03
V86          2.442744e-02
V87         -6.838186e-04
V88          8.555403e-04
V89         -3.329155e-02
V90         -1.793489e-03
V91         -3.614719e-05
```

We had earlier flagged variable $V5$ as causing multicollinearity. As
noted then, we could simply exclude it, but here under ridge, we see
that it has been assigned a very small regression coefficient compared
to most others.

## Cross-Validation{#sec-xval}

So, how do we choose $\lambda$?

A common way to choose among models is *cross-validation*: We set aside
a subset of the data, known as the *holdout* or *test* set, for use in
testing predictive accuracy.  The remaining data is the *training set*.
For each of our competing models -- in this case, competing values of
$\lambda$ -- we fit the model on the training set, then use the result
to predict the test set. We then use whichever model does best in the
test set.

*Example: Million Song data*

``` r
> library(glmnet)
> glmOut <- cv.glmnet(x=as.matrix(s50[,-1]),y=s50$V1,alpha=0)
> glmOut
    Lambda Index Measure     SE Nonzero
min 0.2474   100   89.44 0.9201      90
1se 0.9987    85   90.28 0.9823      90
```

The $\lambda$ value that gave the smallest Mean Squared Prediction Error
(MSE) as 0.2474. (Coincidentally, it was also the smallest value that
the function tried; see **glmOut$lambda**.) A more conservative value of
$\lambda$ was 0.9987, the largest $\lambda$ giving MSE within one
standard error of the minimum; it's conservative in the sense of being
less likely to overfit; its MSE value, 90.28, was only slightly larger
than the best one. In each case, all 90 predictors had nonzero
coefficient estimates.

## Modern View{#sec-pgtn}

There are many ways to deal with multicollinearity, which we must remind
the reader only concerns *approximate* linear dependence pf the columns
of $A$. These days, many analysts go further, using ridge for situations
in which there is *exact* linear dependence.

We saw such a setting in @sec-censusrref. There we deliberately induced
exact linear dependence by inclusion of both male and female dummy
variables. Let's apply ridge:

```{r}
library(qeML) 
data(svcensus) 
svc <- svcensus[,c(1,4:6)]  
svc$man <- as.numeric(svc$gender == 'male') 
svc$woman <- as.numeric(svc$gender == 'female') 
svc$gender <- NULL 
a <- svc[,-2] 
lambda <- 0.1 
a <- as.matrix(a) 
tmp1 <- solve(t(a) %*% a + lambda * diag(4)) 
tmp1 %*% t(a) %*% as.matrix(svc$wageinc) 
```

The results essentially are the same as what we obtained by having only
one dummy, thus no linear dependence: Men still enjoy about an \$11,000
advantage. But ridge allowed us to avoid deleting one of our dummies.
Such deletion is easy in this case, but for large $p$, say in the
hundreds or even more, some analysts prefer the convenience of ridge.

## Formalizing the Notion of Shrinkage

In the early 1980s, the statistical world was shocked by research by
James and Stein that found, in short that:

<blockquote>

Say $W$ has $q$-dimensional normal distribution with mean vector $\mu$
and independent components having variance $\sigma^2$, each. We have a
random sample of size $n$, i.e. $n$ independent observations on $W$.
Then if $q \geq 3$, in terms of Mean Squared Estimation Error, the best
estimator of $\mu$ is NOT the sample mean $\bar{W}$. Instead, it's

$$
\left (
1 - \frac{(q-2) \sigma^2/n}{||\bar{W}||^2} 
\right )
\bar{W}
$$

</blockquote>

The quantity within the parentheses is typically smaller than 1, giving
us the shrinkage property. Note, though, that with larger $n$, the
amount of shrinkage is minor.

In the case of linear regression, shrinkage works there too, with $q$
being the number of columns in the $A$ matrix. 

### Shrinkage through length penalization

Say instead of minimizing @eq-matrixss, we minimize

$$
(S - Ab)'(S - Ab) + \lambda ||b||^2 
$${#eq-matrixssridge}

The larger $b$ is, the harder it is to minimize the overall quantity
@eq-matrixssridge. We say that we *penalize* large values of $b$,
an indirect way of pursuing shrinkage. Now take the derivative and set
to 0:

$$
0 = A'(S-Ab) + \lambda b
$$

i.e.

$$
(A'A + \lambda I) b = A'S
$$ 

and thus

$$
\widehat{\beta} = (A'A+\lambda I)^{-1} A'S
$$

It's ridge! So here is formalization of our "almost singular" etc.
language above to justify ridge as a shrinkage estimator..

### Shrinkage through length limitation

Instead of penalizing $||b||$, we could simply constrain it, i.e. we
could set our optimization problem to:

<blockquote>

minimize $(S-Ab)'(S-Ab)$, subject to the constraint $||b||^2 \leq \gamma$

</blockquote>

We say that this new formulation is the *dual* of the first one. One can
show that they are typically equivalent.

## The LASSO

The LASSO (Least Absolute Shrinkage and Selection Operator) was
developed by Robert Tibshirani in 1996, following earlier work by Leo
Breiman.  It takes $\widehat{\beta}$ to be the value of $b$ that
minimizes

$$
(S - Ab)'(S - Ab) + \lambda ||b||_1
$${#eq-matrixsslasso}

where the "l1 norm" is 

$$
||b|| = \sum_{i=1}^p |b_i|
$$

We will write our original norm as $||b||_2$.

This is a seemingly minor change, but with important implications.  What
Breiman and Tibshirani were trying to do was to obtain a *sparse*
$\widehat{\beta}$ , i.e. a solution with lots of 0s, thereby providing a
method for predictor variable selection. This is important because
so-called "parsimonious" prediction models are desirable.

### Properties

To that end, first note that it can be shown that, under some technical
conditions, that the ridge solution minimizes 

$$
(S - Ab)'(S - Ab) 
$$

subject to the constraint

$$
||b||_2 \leq \gamma
$$

while in the LASSO case the constraint is

$$
||b||_1 \leq \gamma
$$

As with $\lambda$ in the original formulation, $\gamma$ is a positive
number chosen by the analyst.

## Ridge vs. LASSO for Dimension Reduction

Today's large datasets being so common, we need a way to "cut things
down to size," i.e. *dimension reduction*, aimed at reducing the number
of predictor variables. This is done both for the sake of simplicity and
to over *overfitting*, in which fitting an overly complex model can
reduce predictive power.

### Geometric view

Comparison between the ridge and LASSO concepts is often done via this
graph depicting the LASSO setting:

![LASSO sparsity](LASSO_gray.png)

Here $p = 2$, with $b = (b_1,b_2)'$. The horizontal and vertical axes
represent $b_1$ and $b_2$.  

* The constraint $||b||_1 \leq \gamma$ then takes the form of a diamond,
  with corners at 
  $(\gamma,0)$, 
  $(0,\gamma)$, 
  $(-\gamma,0)$ and
  $(0,-\gamma)$. The constraint $||b||_1 \leq \gamma$
  requires us to choose a point $b$ somewhere in the
  diamond, including the boundary.

* The concentric ellipses depict the values of $c(b) = (S - Ab)'(S -
  Ab)$, as follows.  

* Consider one particular value of $c(b)$, say 1.68. 

* Many different points $b$ in the graph will have $c(b) = 1.68$; in
  fact, the locus of all such points is an ellipse.  

* There is one ellipse for each possible value of $c(b)$. So, there are
  infinitely many ellipses, though only two are shown here.

* Larger values of $c(b)$ yield larger ellipses.

* On the one hand, we want to choose a $b$ for which $c(b)$ -- our total
  squared prediction error -- is small, thus a smaller ellipse. 

* But on the other hand, we need at least one point on the ellipse to 
  be in common with the diamond.  

* The solution is then a point $b$ in which the ellipse
  just barely touches the diamond, respectively.

### Implication for dimension reduction.

The key point is that that "barely touching" point 
will be one of the four corners of the diamond, points at which either
$b_1 = 0$ or $b_2 = 0$ -- *hence a sparse solution*, meaning one in
which many/most of the coefficients in the fitted model will be 0. This
achieves the goal of dimension reduction.

Ridge will not produce a sparse solution. The diamond would now be a
circle (not shown). The "barely touching point" will almost certainly
will be at a place in which both $b_1$ and $b_2$ are nonzero. Hence no
sparsity.

### Avoidance of overfitting *without* dimension reduction

As we've seen, both ridge and LASSO reduce the size of the
$\widehat{\beta}$ vector of estimated coefficients. Smaller quantities
have smaller statistical variances, hence a guard against overfitting.
So, even ridge can be employed as an approach to the overfitting
problem, even though it does not provide a sparse solution.

On the other hand, in some settings, it may be desirable to keep all
predictors, as seen in the next section.

## Example: NYC Taxi Data

The purpose of this data is to predict trip time in the New York City
taxi system. The $qeML$ package includes a 10,000-row subset.

```{r}
library(qeML)
data(nyctaxi)
head(nyctaxi)
dim(nyctaxi)
length(unique(nyctaxi$PULocationID))
length(unique(nyctaxi$DOLocationID))
```

An old rule of thumb says that if we have $p$ predictors and $n$ data
points, we should keep $p < \sqrt{n}$ to avoid overfitting. As we will
see in a later chapter, these days that rule is being questioned, but
let's see how it fits in here. In our case here, $p = 1+143+205+1 =
350$, much larger than $p = \sqrt{10000} = 100$. And if we are fitting a
linear model, we may consider pickup/dropoff location interaction
variables, basically products of the pickup and dropoff dummy variables.
[To avoid exact multicollinearity, we will use only 142 and 204 of the
pickup and dropoff variables.]{.column-margin}

Thus we either should delete some of the pickup and dropoff variables,
or use all of them but temper the fit using ridge. The latter may be
more attractive, as riders would like a time estimate for their
particular pickup and dropoff locations.

```{r}
library(glmnet)
nycwide <- factorsToDummies(nyctaxi[,-1])
glmOut <- cv.glmnet(x=nycwide,y=nyctaxi[,1],alpha=0)
glmOut
```


## A Warning

Many statistical quantities now have *regularized*, i.e. shrunken
versions. It is also standard practice in neural networks. This may be
quite helpful in prediction contexts. However, note the following:

::: {.callout-important}

## No Statistical Inference on Shrinkage Estimators

Shrinkage produces a bias, of unknown size. Thus classical statistical
inference (confidence intervals, hypothesis tests), e.g. those based on
@eq-varcovar for linear models, is not possible.

:::

## Your Turn

❄️  **Your Turn:** Show that $A_{new}$ in @sec-matform is of full rank, $p$.



